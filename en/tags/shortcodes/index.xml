<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Shortcodes - Tag - Ame</title>
        <link>https://example.com/en/tags/shortcodes/</link>
        <description>Shortcodes - Tag - Ame</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 04 Mar 2020 16:29:41 &#43;0800</lastBuildDate><atom:link href="https://example.com/en/tags/shortcodes/" rel="self" type="application/rss+xml" /><item>
    <title>Theme Documentation - Built-in Shortcodes</title>
    <link>https://example.com/en/game-ability-system/</link>
    <pubDate>Wed, 04 Mar 2020 16:29:41 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://example.com/en/game-ability-system/</guid>
    <description><![CDATA[二分查找的思想-减而治之 二分查找通过不断缩小区间的范围来查找目标元素，这种&quot;不断缩小区间&quot;就是减而治之的思想
减而治之听起来高大上，其实就是排除法，我们每一次查找就排除掉一些元素，每一次重复此操作，自然就找到了我们的目标元素
二分查找的应用范围 在有序数组中寻找一个目标值，有序和数组是重点
在整数范围内寻找一个目标值，也就是不一定是有序数组，旋转数组和山脉数组都可以用到二分法
二分查找的算法思路 在循环体中查找元素 简介
此思路很简单，就是直接在数组中查找到目标元素 时间复杂度 O(log N)，这里的N是指数组的长度 空间复杂度：由于二分查找算法在执行的过程中只使用到常数个临时变量，因此空间复杂度是 O(1)。 代码模板
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int search(vector&lt;int&gt;&amp; nums, int target) { int left = 0, right = nums.size()-1; while (left &lt;= right) { int mid = left + (right - left) / 2; if (nums[mid] == target) { return mid; } if (nums[mid] &lt; target) { left = mid + 1; } if (nums[mid] &gt; target) { right = mid - 1; } } } 在循环体中排除目标元素一定不存在的区间 简介]]></description>
</item><item>
    <title>Theme Documentation - Built-in Shortcodes</title>
    <link>https://example.com/en/gas-%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C%E6%8A%80%E8%83%BD/</link>
    <pubDate>Wed, 04 Mar 2020 16:29:41 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://example.com/en/gas-%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C%E6%8A%80%E8%83%BD/</guid>
    <description><![CDATA[二分查找的思想-减而治之 二分查找通过不断缩小区间的范围来查找目标元素，这种&quot;不断缩小区间&quot;就是减而治之的思想
减而治之听起来高大上，其实就是排除法，我们每一次查找就排除掉一些元素，每一次重复此操作，自然就找到了我们的目标元素
二分查找的应用范围 在有序数组中寻找一个目标值，有序和数组是重点
在整数范围内寻找一个目标值，也就是不一定是有序数组，旋转数组和山脉数组都可以用到二分法
二分查找的算法思路 在循环体中查找元素 简介
此思路很简单，就是直接在数组中查找到目标元素 时间复杂度 O(log N)，这里的N是指数组的长度 空间复杂度：由于二分查找算法在执行的过程中只使用到常数个临时变量，因此空间复杂度是 O(1)。 代码模板
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int search(vector&lt;int&gt;&amp; nums, int target) { int left = 0, right = nums.size()-1; while (left &lt;= right) { int mid = left + (right - left) / 2; if (nums[mid] == target) { return mid; } if (nums[mid] &lt; target) { left = mid + 1; } if (nums[mid] &gt; target) { right = mid - 1; } } } 在循环体中排除目标元素一定不存在的区间 简介]]></description>
</item><item>
    <title>Theme Documentation - Built-in Shortcodes</title>
    <link>https://example.com/en/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
    <pubDate>Wed, 04 Mar 2020 16:29:41 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://example.com/en/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
    <description><![CDATA[二分查找的思想-减而治之 二分查找通过不断缩小区间的范围来查找目标元素，这种&quot;不断缩小区间&quot;就是减而治之的思想
减而治之听起来高大上，其实就是排除法，我们每一次查找就排除掉一些元素，每一次重复此操作，自然就找到了我们的目标元素
二分查找的应用范围 在有序数组中寻找一个目标值，有序和数组是重点
在整数范围内寻找一个目标值，也就是不一定是有序数组，旋转数组和山脉数组都可以用到二分法
二分查找的算法思路 在循环体中查找元素 简介
此思路很简单，就是直接在数组中查找到目标元素 时间复杂度 O(log N)，这里的N是指数组的长度 空间复杂度：由于二分查找算法在执行的过程中只使用到常数个临时变量，因此空间复杂度是 O(1)。 代码模板
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int search(vector&lt;int&gt;&amp; nums, int target) { int left = 0, right = nums.size()-1; while (left &lt;= right) { int mid = left + (right - left) / 2; if (nums[mid] == target) { return mid; } if (nums[mid] &lt; target) { left = mid + 1; } if (nums[mid] &gt; target) { right = mid - 1; } } } 在循环体中排除目标元素一定不存在的区间 简介]]></description>
</item></channel>
</rss>
